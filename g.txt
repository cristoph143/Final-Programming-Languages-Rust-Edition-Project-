fn is_correct_grammar(sorted_map: &Vec<(&usize, &Dictionary)>) -> bool {
    // initialize a counter
    let counter = 0;
    // intitialize bool
    let mut is_correct_grammar = true;
    // if the first index of sorted map data_type is not "Keyword", then return false
    if sorted_map[0].1.data_type != "Keyword" {
        return false
    }
    // if the second index of sorted map data_type is not "identifier", then return false
    if sorted_map[1].1.data_type != "Identifier" {
        return false;
    }
    // iterate the sorted map from the third index until the last index
    sorted_map.iter().skip(2).for_each(|(_idx, dictionary)| {
        // check if the data_type of the current index is "Terminator"
        if dictionary.data_type == "Terminator" {
            // if the data_type of the previous index is "Equals_op", then return false
            if sorted_map[counter].1.data_type == "Equals_op" {
                is_correct_grammar = false;
            }
        }
    });
    return is_correct_grammar;
}
    // if array[0] != "keyword"{
    //     // print Error
    //     println!("Syntax error, insert \"VariableDeclarators\" to complete LocalVariableDeclaration");
    //     // exit the program
    //     std::process::exit(0);
    // }
    // if array[1] != "Identifier"{
    //     println!("Syntax error on token[1], invalid VariableDeclarator");
    //     // exit the program
    //     std::process::exit(0);
    // }
    // println!("hello {}", array[1]);
    // // if len is less than 2, exit program
    // if array.len() < 2{
    //     println!("Syntax error, insert \"VariableDeclarators\" to complete LocalVariableDeclaration");
    //     // exit the program
    //     std::process::exit(0);
    // }
    // let check_gram = for i in 2..array.len(){
    //     println!("hello {} ", array[i]);
    //     // if current index is "Terminator", check if it is not the last index
    //     if array[i] == "Terminator"{
    //         if i != array.len() - 1{
    //             println!("Syntax error, insert \";\" to complete BlockStatements");
    //             // exit the program
    //             std::process::exit(0);
    //         }
    //     }
    //     // if array[i] is equal to "single_quote" or "double_quote", check for the next quote
    //     if array[i] == "single_quote" || array[i] == "double_quote"{
    //         // if current index is the last index, then exit program
    //         if i == array.len() - 1{
    //             println!("Syntax error, insert \"{}\" to complete BlockStatements", array[i]);
    //             // exit the program
    //             std::process::exit(0);
    //         }
    //     } 
    // };
    // check_gram;
